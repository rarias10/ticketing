name: deploy-manifests

on:
  push:
    branches:
      - master
    paths:
      - "infra/k8s-prod/**"
  workflow_dispatch:

jobs:
  deploy-manifests:
    runs-on: ubuntu-latest
    env:
      KOPS_CLUSTER_NAME: kubevpro.basquiat.app
      KOPS_STATE_STORE: s3://kopsstate1357
      AWS_REGION: us-east-2

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Kops and Kubectl
        uses: ./.github/actions/setup-kops

      - name: Validate Kops cluster exists
        run: |
          echo "Checking if Kops cluster exists..."
          if kops get cluster --name=${KOPS_CLUSTER_NAME} --state=${KOPS_STATE_STORE}; then
            echo "✅ Kops cluster found: ${KOPS_CLUSTER_NAME}"
          else
            echo "❌ Kops cluster not found: ${KOPS_CLUSTER_NAME}"
            echo "Please ensure your Kops cluster is created and accessible"
            echo "Run: kops create cluster --name=${KOPS_CLUSTER_NAME} --state=${KOPS_STATE_STORE} --zones=us-east-2a,us-east-2b,us-east-2c"
            exit 1
          fi

      - name: Configure kubectl for Kops cluster
        run: |
          echo "Configuring kubectl for Kops cluster..."
          echo "Cluster: ${KOPS_CLUSTER_NAME}"
          echo "State Store: ${KOPS_STATE_STORE}"
          echo "Region: ${AWS_REGION}"

          # Export kubecfg and validate
          kops export kubecfg --name=${KOPS_CLUSTER_NAME} --state=${KOPS_STATE_STORE}

          # Verify kubectl can connect
          echo "Testing kubectl connection..."
          kubectl cluster-info
          kubectl get nodes

      - name: Deploy Kubernetes manifests
        run: |
          echo "Applying Kubernetes manifests..."
          echo "Current kubectl context:"
          kubectl config current-context

          # Apply manifests
          kubectl apply -f infra/k8s-prod/

      - name: Force restart deployments to pull latest images
        run: |
          echo "Restarting deployments to ensure latest images are pulled..."
          kubectl rollout restart deployment/auth-depl || true
          kubectl rollout restart deployment/client-depl || true
          kubectl rollout restart deployment/tickets-depl || true
          kubectl rollout restart deployment/orders-depl || true
          kubectl rollout restart deployment/payments-depl || true
          kubectl rollout restart deployment/expiration-depl || true

      - name: Wait for deployments to be ready
        run: |
          echo "Waiting for deployments to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment/auth-depl || true
          kubectl wait --for=condition=available --timeout=300s deployment/client-depl || true
          kubectl wait --for=condition=available --timeout=300s deployment/tickets-depl || true
          kubectl wait --for=condition=available --timeout=300s deployment/orders-depl || true
          kubectl wait --for=condition=available --timeout=300s deployment/payments-depl || true
          kubectl wait --for=condition=available --timeout=300s deployment/expiration-depl || true

      - name: Verify deployment status
        run: |
          echo "Checking deployment status..."
          kubectl get deployments
          kubectl get services
          kubectl get pods
          echo "Checking ingress..."
          kubectl get ingress
