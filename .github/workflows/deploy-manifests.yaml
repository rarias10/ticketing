name: deploy-manifests

on:
  push:
    branches:
      - master
    paths:
      - "infra/k8s-prod/**"
  workflow_dispatch:

jobs:
  deploy-manifests:
    runs-on: ubuntu-latest
    env:
      KOPS_CLUSTER_NAME: kubevpro.basquiat.app
      KOPS_STATE_STORE: s3://kopsstate1357
      AWS_REGION: us-east-2

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Kops and Kubectl
        uses: ./.github/actions/setup-kops

      - name: Validate Kops cluster exists
        run: |
          echo "Checking if Kops cluster exists..."
          if kops get cluster --name=${KOPS_CLUSTER_NAME} --state=${KOPS_STATE_STORE}; then
            echo "‚úÖ Kops cluster found: ${KOPS_CLUSTER_NAME}"
          else
            echo "‚ùå Kops cluster not found: ${KOPS_CLUSTER_NAME}"
            echo "Please ensure your Kops cluster is created and accessible"
            echo "Run: kops create cluster --name=${KOPS_CLUSTER_NAME} --state=${KOPS_STATE_STORE} --zones=us-east-2a,us-east-2b,us-east-2c"
            exit 1
          fi

      - name: Configure kubectl for Kops cluster
        run: |
          echo "Configuring kubectl for Kops cluster..."
          echo "Cluster: ${KOPS_CLUSTER_NAME}"
          echo "State Store: ${KOPS_STATE_STORE}"
          echo "Region: ${AWS_REGION}"

          # Create kops secret for authentication
          echo "Setting up kops authentication..."
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"

          # Export kubecfg with explicit user setup
          kops export kubecfg --name=${KOPS_CLUSTER_NAME} --state=${KOPS_STATE_STORE} --admin

      - name: Validate cluster is ready
        run: |
          echo "Validating cluster readiness..."

          # Check if cluster is validated and ready
          echo "Running kops validate cluster..."
          if kops validate cluster --name=${KOPS_CLUSTER_NAME} --state=${KOPS_STATE_STORE}; then
            echo "‚úÖ Cluster validation successful"
          else
            echo "‚ùå Cluster validation failed - cluster may not be fully deployed"
            echo "üí° You may need to run: kops update cluster --name=${KOPS_CLUSTER_NAME} --state=${KOPS_STATE_STORE} --yes"
            echo "‚ö†Ô∏è  Continuing anyway since you mentioned cluster is running..."
          fi

          # Check kubectl config
          echo "Current kubectl config:"
          kubectl config view --minify

          # Test kubectl connection with more verbose output
          echo "Testing kubectl connection..."
          kubectl cluster-info --request-timeout=30s || {
            echo "‚ùå kubectl connection failed"
            echo "üîç Debugging information:"
            echo "kubectl config current-context: $(kubectl config current-context)"
            echo "kubectl config get-contexts: "
            kubectl config get-contexts
            
            echo "üí° Possible solutions:"
            echo "1. Check if API server security groups allow GitHub Actions IPs"
            echo "2. Verify cluster is fully ready: kops validate cluster"
            echo "3. Check if cluster uses different authentication (OIDC, etc.)"
            exit 1
          }

          echo "Getting cluster nodes..."
          kubectl get nodes

      - name: Deploy Kubernetes manifests
        run: |
          echo "Applying Kubernetes manifests..."
          echo "Current kubectl context:"
          kubectl config current-context

          # Apply manifests
          kubectl apply -f infra/k8s-prod/

      - name: Force restart deployments to pull latest images
        run: |
          echo "Restarting deployments to ensure latest images are pulled..."
          kubectl rollout restart deployment/auth-depl || true
          kubectl rollout restart deployment/client-depl || true
          kubectl rollout restart deployment/tickets-depl || true
          kubectl rollout restart deployment/orders-depl || true
          kubectl rollout restart deployment/payments-depl || true
          kubectl rollout restart deployment/expiration-depl || true

      - name: Wait for deployments to be ready
        run: |
          echo "Waiting for deployments to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment/auth-depl || true
          kubectl wait --for=condition=available --timeout=300s deployment/client-depl || true
          kubectl wait --for=condition=available --timeout=300s deployment/tickets-depl || true
          kubectl wait --for=condition=available --timeout=300s deployment/orders-depl || true
          kubectl wait --for=condition=available --timeout=300s deployment/payments-depl || true
          kubectl wait --for=condition=available --timeout=300s deployment/expiration-depl || true

      - name: Verify deployment status
        run: |
          echo "Checking deployment status..."
          kubectl get deployments
          kubectl get services
          kubectl get pods
          echo "Checking ingress..."
          kubectl get ingress
